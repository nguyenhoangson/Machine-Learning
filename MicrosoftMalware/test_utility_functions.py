# Library
import re

###  Utility functions and their test cases

#1
def get_fileID_from_file_path(path):
    '''Get input as path of .asm or .bytes files and
    
       Return the id

       E.g: get_fileID_from_file_path('home/livetolove128/01azqd4InC7m9JpocGv5.asm'): '01azqd4InC7m9JpocGv5'
    '''
    temp_str = re.search('.{20}\.(asm|bytes)', path).group(0)
    str_id = re.search('.{20}', temp_str).group(0)
    return str_id

def test_it_should_return_id_from_path_of_bytes_file():
    assert get_fileID_from_file_path('home/livetolove128/01azqd4InC7m9JpocGv5.asm ') == '01azqd4InC7m9JpocGv5'
    
def test_it_should_return_id_from_path_of_asm_file():
    assert get_fileID_from_file_path(' home/livetolove128/01azqd4InC7m9JpocGv5.bytes') == '01azqd4InC7m9JpocGv5'

#2
def count_new_line_characters(string):
    return len(re.findall('\\n', string))

def test_it_should_return_the_number_of_new_line_characters():
    assert count_new_line_characters('This is the test \n with 3 \n new line characters \n') == 3
    assert count_new_line_characters('This is the test \n with 1 new line characters') == 1

#3
def get_op_code_from_asm_string(string):
    # Check if input string contains opcode 
    result = ''
    if (is_containing_op_code(string)):
        patterns_matched = re.findall(' [a-z]+', string[20:])
        if(len(patterns_matched) > 0):
            result = patterns_matched[0]
            result = result.replace(" ", "") # Remove empty character
    else:
        result = ''
    return result

def test_it_should_return_the_exact_op_code_of_asm_string():
    assert get_op_code_from_asm_string('.text:00401000						       ; Format	     : Portable	executable for 80386 (PE)') == ''
    assert get_op_code_from_asm_string('.text:00401000 56							       push    esi') == 'push'
    assert get_op_code_from_asm_string('.text:00401001 8D 44 24	08						       lea     eax, [esp+8]') == 'lea'
    assert get_op_code_from_asm_string('.text:00401141 CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC CC		       align 10h') == 'align'

    assert get_op_code_from_asm_string('.text:00401450						       unknown_libname_1:		       ; Microsoft VisualC 2-11/net runtime') == ''
    assert get_op_code_from_asm_string('   .text:00401456 8B 41 04							       mov     eax, [ecx+4]') == 'mov'
    assert get_op_code_from_asm_string('.text:0040145E CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC CC CC+		       db 12h dup(0CCh)') == 'db'
    assert get_op_code_from_asm_string('.text:004014A0						       ; [00000005 BYTES: COLLAPSED FUNCTION AFX_MAINTAIN_STATE2::AFX_MAINTAIN_STATE2(AFX_MODULE_STATE *). PRESS KEYPAD	CTRL-"+" TO EXPAND]') == ''

def test_it_should_deal_properly_with_some_trick_strings():
    assert get_op_code_from_asm_string('.text:004014A0              ; :00000000 AB') == ''
    assert get_op_code_from_asm_string('') == ''

#4
def is_containing_op_code(string):

    result = re.search(':[0-9A-F]{8} {1,3}[0-9A-F]{2}', string[0:35])

    if (result is not None):
        result = True
    else:
        result = False

    return result

def test_it_should_inform_correctly_whether_input_string_does_contain_op_code():
    assert is_containing_op_code('.text:004014A0						       ; [00000005 BYTES: COLLAPSED FUNCTION AFX_MAINTAIN_STATE2::AFX_MAINTAIN_STATE2(AFX_MODULE_STATE *). PRESS KEYPAD	CTRL-"+" TO EXPAND]') == False
    assert is_containing_op_code('.text:0040145E CC CC CC	CC CC CC CC CC CC CC CC	CC CC CC CC CC+		       db 12h dup(0CCh)') == True
    assert is_containing_op_code('.text:00000000              :dsadasd:222222222 AA') == False

def test_it_should_handle_tricky_cases():
    assert is_containing_op_code('') == False 
    assert is_containing_op_code('.text:00000000 AB                        ; :09999999 AB') == True
    assert is_containing_op_code('HEADER:0ABC2222                          ; :0012DADD AC') == False
    
#5
def get_all_op_codes_from_asm_content(string):
    temp = string.split('\n') # transform the whole content as array with element as lines
    result = ''
    for line in temp:
        if(is_containing_op_code(line)):
            result = result + get_op_code_from_asm_string(line).replace(' ', '') + ' '

    # Formatting the result string
    result = result[:-1] # remove the last empty character
    result = re.sub(' +', ' ', result)
    if(result[0:1] == ' '):
        result = result[1:] # remove blank at the beginning of the string if any
    return result

def test_it_should_return_all_op_codes_as_a_string_aligned_with_line_order_in_file_content():
    assert get_all_op_codes_from_asm_content('.text:0040102B CC CC CC	CC CC						       align 10h\n.text:00401030 56							       push    esi\n.text:00401031 8B F1							       mov     esi, ecx') == 'align push mov'
    
    assert get_all_op_codes_from_asm_content('.text:00401000                                                              \n.text:00401000						       ; ---------------------------------------------------------------------------\n.text:00401000						       ; Format	     : Portable	executable for 80386 (PE)') == '' 
    
    assert get_all_op_codes_from_asm_content(".text:00401000						       _text	       segment para public 'CODE' use32\n.text:00401000								       assume cs:_text\n.text:00401000								       ;org 401000h\n.text:00401000								       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing\n.text:00401000 56							       push    esi\n.text:00401001 8D 44 24	08						       lea     eax, [esp+8]\n.text:00401005 50							       push    eax") == 'push lea push'

def test_it_should_format_string_properly():
    assert get_all_op_codes_from_asm_content('.text:00401000 00 00 80	40 40 28 00 1C 02 42 00	C4 00 20 04 20+dword_401000    dd 40800000h, 1C002840h,	0C4004202h, 20042000h, 9200000h\n.text:00401000 00 00 20	09 2A 02 00 00 00 00 8E	10 41 0A 21 01+					       ; DATA XREF: HEADER:00400144o\n.text:00401000 40 00 02	01 00 90 21 00 32 40 00	1C 01 40 C8 18+					       ; HEADER:0040021Co\n.text:00401000 40 82 02	63 20 00 00 09 10 01 02	21 00 82 00 04+		       dd 22Ah,	108E0000h, 1210A41h, 1020040h, 219000h,	1C004032h') == 'dd dd'
