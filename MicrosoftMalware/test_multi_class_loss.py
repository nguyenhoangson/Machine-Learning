import numpy as np

### Refer to file test_multi_class_log_loss.py with pytest 2.8.5 to run tests

# Make multi class log loss function
def multi_class_log_loss(actuals, predictions):
    """ Implementation of multiclass log loss: 
    https://www.kaggle.com/wiki/MultiClassLogLoss.
    
    Parameters
    -------------
    ** actuals = numpy_array, shape = [n_samples, 1], 
              each_row_contains_true_class: integer from [0, n_classes - 1]
    
    ** predictions = numpy_array, shape = [n_samples, n_classes],
                     each_row_contains_predicted_probablities: float in [0,1] and sum approximately to 1
    
    Return Type
    -------------
    ** loss = float
    """
    
    n_samples = actuals.shape[0]

    # Auxiliary matrix for computational convenience purpose
    auxiliary = np.zeros(predictions.shape)
    auxiliary[np.arange(n_samples), actuals.astype(int)] = 1
    
    # Sum log
    sum_log = np.sum(auxiliary*np.log(predictions))
    
    loss = (-1.0)/(n_samples)*sum_log
    return loss

def test():
    a = np.array([1, 2, 1])
    b = np.array([[0.3, 0.4, 0.5], [0.3, 0.5, 0.6], [0.3, 0.4, 0.5]])
    assert multi_class_log_loss(a, b) == 4
